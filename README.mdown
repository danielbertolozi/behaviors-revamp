# Behaviors Revamp

## Background

Once, in a previous project, there was a requirement involving Workflow Actions an user could do (e.g. send a document for review, assign to someone else, approve, reject, publish).

As most of these were alike, an abstraction was made – however, it didn't scale well. This is a lessons learned from that time (over a year ago).

## Requirements

* The developer should be able to compose actions using Behaviors. A behavior is an atomic and reusable operation (i.e. send a POST to backend, open this dialog that appeared everywhere), and an Action is a group of ordered behaviors.
* Execution needs to support async (i.e. waiting for user input, BE response)
* Actions could branch between possible paths while executing the Behaviors cascade (according to results from previous behaviors execution)
* When a behavior failed, the developer could compose the Action so that 1) it failed entirely; or 2) it rolled back to a specific behavior and tried to execute again
* A behavior could interrupt the whole cascade (if by final user command)

## Original implementation

The original implementation relied on Javascript Promises to execute the cascade.

Actions were instanced in a decorator-like fashion – the inner child would be a default class which kickstarted the process and handled errors. Execution order was inner=>outmost.

```typescript
const action = new MyLastAction(new MiddleAction(new BaseAction()));
```

On runtime, it would first go through all behaviors (like in a LinkedList, from child to parent) and execute it. Each behavior then returned a Promise which would be resolved as soon as something was completed (a request, user input, et cetera).

A design issue rose as soon as it was needed to be able to rollback to a specific behavior: JS Promises only have three states: Pending, Rejected and Fulfilled (I'm ignoring Settled on purpose).

When a promise is set to Fulfilled or Rejected, it **cannot** change its state anymore.